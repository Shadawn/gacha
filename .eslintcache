[{"C:\\Enigma-Studios\\gacha\\src\\index.js":"1","C:\\Enigma-Studios\\gacha\\src\\Game.js":"2","C:\\Enigma-Studios\\gacha\\src\\App.js":"3","C:\\Enigma-Studios\\gacha\\src\\Board.js":"4","C:\\Enigma-Studios\\gacha\\src\\reportWebVitals.js":"5","C:\\Enigma-Studios\\gacha\\src\\Characters.js":"6","C:\\Enigma-Studios\\gacha\\src\\SkillFunctions.js":"7","C:\\Enigma-Studios\\gacha\\src\\Conditions.js":"8","C:\\Enigma-Studios\\gacha\\src\\Lobby.js":"9"},{"size":500,"mtime":1609331225087,"results":"10","hashOfConfig":"11"},{"size":6387,"mtime":1614626518130,"results":"12","hashOfConfig":"11"},{"size":943,"mtime":1614629446073,"results":"13","hashOfConfig":"11"},{"size":8154,"mtime":1614625755145,"results":"14","hashOfConfig":"11"},{"size":362,"mtime":1609331225087,"results":"15","hashOfConfig":"11"},{"size":6117,"mtime":1613900007906,"results":"16","hashOfConfig":"11"},{"size":7576,"mtime":1614629589908,"results":"17","hashOfConfig":"11"},{"size":1922,"mtime":1614624105278,"results":"18","hashOfConfig":"11"},{"size":457,"mtime":1614621933519,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"4r1c2v",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"C:\\Enigma-Studios\\gacha\\src\\index.js",[],["42","43"],"C:\\Enigma-Studios\\gacha\\src\\Game.js",[],"C:\\Enigma-Studios\\gacha\\src\\App.js",[],"C:\\Enigma-Studios\\gacha\\src\\Board.js",["44","45"],"C:\\Enigma-Studios\\gacha\\src\\reportWebVitals.js",[],["46","47"],"C:\\Enigma-Studios\\gacha\\src\\Characters.js",[],"C:\\Enigma-Studios\\gacha\\src\\SkillFunctions.js",["48","49"],"import { INVALID_MOVE } from 'boardgame.io/core';\r\nimport { newCondition, newEffect, addCondition, removeCondition } from './Conditions'\r\n\r\nconst SkillFunctions = {};\r\n\r\nSkillFunctions.ATBModifierTarget = (G, caster, target, params) => {\r\n  target.current.progress += params.value;\r\n  if (target.current.progress < 0) target.current.progress = 0;\r\n}\r\n\r\nSkillFunctions.DamageTarget = (G, caster, target, params) => {\r\n  dealDamage(G, caster, target, skillValue(caster, params));\r\n}\r\n\r\nSkillFunctions.ExecuteTarget = (G, caster, target, params) => {\r\n  const threshold = skillValue(caster, params);\r\n  if (target.current.health < threshold) {\r\n    death(G, target);\r\n  }\r\n}\r\n\r\nSkillFunctions.DamageTargetWithLifeSteal = (G, caster, target, params) => {\r\n  const damageDealt = dealDamage(G, caster, target, skillValue(caster, params));\r\n  receiveHealing(G, caster, damageDealt * params.lifesteal);\r\n}\r\n\r\nSkillFunctions.GainPower = (G, caster, target, params) => {\r\n  team(G, caster).power += params.value;\r\n}\r\n\r\nSkillFunctions.AttributeMultiplier = (G, character, condition, effect) => {\r\n  character.current[effect.params.attribute] += character.base[effect.params.attribute] * effect.params.value;\r\n}\r\n\r\nSkillFunctions.ApplyBasicCondition = (G, caster, target, params) => {\r\n  const condition = newCondition(params.name, skillDuration(caster, params.duration, params.boostscaling), [\r\n    newEffect('statsCalculation', 'AttributeMultiplier', {\r\n      value: params.value,\r\n      attribute: params.attribute\r\n    })\r\n  ]);\r\n  addCondition(G, target, condition);\r\n}\r\n\r\nSkillFunctions.LifeSteal = (G, character, condition, effect, eventParams) => {\r\n  receiveHealing(G, character, eventParams.damage)\r\n}\r\n\r\nSkillFunctions.ApplyLifesteal = (G, caster, target, params) => {\r\n  const condition = newCondition(params.name, skillDurationDefault(caster, params), [\r\n    newEffect('damageDealt', 'Lifesteal', {\r\n      value: params.value\r\n    })\r\n  ])\r\n  addCondition(G, target, condition);\r\n}\r\n\r\nSkillFunctions.DamageAbsorbingShield = (G, character, condition, effect, eventParams) => {\r\n  const damageReduction = Math.min(eventParams.damage, effect.params.value);\r\n  eventParams.damage -= damageReduction;\r\n  effect.params.value -= damageReduction;\r\n  if (effect.params.value === 0) {\r\n    removeCondition(G, condition);\r\n  }\r\n}\r\n\r\nSkillFunctions.ApplyDamageAbsorbingShieldTarget = (G, caster, target, params) => {\r\n  const condition = newCondition(params.name, skillDurationDefault(caster, params), [\r\n    newEffect('damageTaken', 'DamageAbsorbingShield', {\r\n      value: skillDamage(caster, params.scaling, params.boostscaling)\r\n    })\r\n  ]);\r\n  addCondition(G, target, condition);\r\n}\r\n\r\nSkillFunctions.Stun = (G, character, condition, effect) => {\r\n  character.current.status.stunned = true;\r\n  character.current.active = false;\r\n}\r\n\r\nSkillFunctions.ApplyStun = (G, caster, target, params) => {\r\n  const condition = newCondition('Stunned', skillDurationDefault(caster, params), [\r\n    newEffect('statsCalculation', 'Stun', {})\r\n  ]);\r\n  addCondition(G, target, condition);\r\n}\r\n\r\nSkillFunctions.Youmu__CreateClone = (G, caster, target, params) => {\r\n  const condition = newCondition('Wheel of Pain of the Living and Dead', false, [\r\n    newEffect('damageTaken', 'DamageAbsorbingShield', {\r\n      value: skillValue(caster, params)\r\n    }),\r\n    newEffect('statsCalculation', 'Youmu__Clone')\r\n  ])\r\n  addCondition(G, caster, condition);\r\n}\r\n\r\nSkillFunctions.Youmu__Clone = (G, character, condition, effect) => {\r\n  character.current.status.Youmu__Clone = true;\r\n}\r\n\r\nSkillFunctions.Youmu__CloneDamage = (G, caster, target, params) => {\r\n  if (caster.current.status.Youmu__Clone !== true) return;\r\n  dealDamage(G, caster, target, params.scaling, 0);\r\n}\r\n\r\nSkillFunctions.Youmu__ApplyDelayedDamage = (G, caster, target, params) => {\r\n  const condition = newCondition('Slash of the Eternal Future', params.delay, [\r\n    newEffect('conditionEnds', 'Youmu__DelayedDamage', {\r\n      targetID: target.current.ID,\r\n      scaling: params.scaling * (1 + params.boostscaling * caster.current.boosts),\r\n    }),\r\n  ])\r\n  addCondition(G, caster, condition);\r\n}\r\nSkillFunctions.Youmu__DelayedDamage = (G, character, condition, effect, eventParams) => {\r\n  const target = G.characters[effect.params.targetID];\r\n  dealDamage(G, character, target, skillValue(character, effect.params));\r\n}\r\n\r\nexport function skillValue(character, params) {\r\n\r\n  return character.current[params.attribute || 'attack'] * params.scaling * (1 + character.current.boosts * (params.boostscaling || 0));\r\n}\r\n\r\nexport function skillDamage(character, scaling, boostscaling) {\r\n  return character.current.attack * scaling * (1 + boostscaling * character.current.boosts);\r\n}\r\n\r\nexport function skillDamageDefault(character, params) {\r\n  return skillDamage(character.current.attack, params.scaling, params.boostscaling);\r\n}\r\n\r\nexport function skillDuration(character, baseDuration, boostscaling) {\r\n  return baseDuration * (1 + (boostscaling || 0) * character.current.boosts);\r\n}\r\n\r\nexport function skillDurationDefault(character, params) {\r\n  return skillDuration(character, params.duration, params.boostscaling)\r\n}\r\n\r\nexport function isAvailableTarget(G, caster, target, skill) {\r\n  if (target.current.alive === false) return false;\r\n  if (skill.target === 'enemy' || skill.target === 'allenemy') return teamID(G, caster) !== teamID(G, target)\r\n  else if (skill.target === 'ally') return teamID(G, caster) === teamID(G, target)\r\n  else if (skill.target === 'self') return caster.current.ID === target.current.ID\r\n  else throw 'Invalid targeting variant'\r\n}\r\n\r\nfunction dealDamage(G, caster, target, damage) {\r\n  const eventParams = {\r\n    damage: damage\r\n  }\r\n  takeDamage(G, target, eventParams)\r\n  caster.current.conditions.forEach(conditionID => {\r\n    const condition = G.conditions[conditionID];\r\n    if (condition === undefined || condition === null) return;\r\n    condition.effects.forEach(effect => {\r\n      if (effect.type !== 'damageDealt') return;\r\n      const skillFunction = SkillFunctions[effect.name];\r\n      skillFunction(G, caster, condition, effect, eventParams)\r\n    })\r\n  })\r\n  return eventParams.damage;\r\n}\r\n\r\nfunction takeDamage(G, character, eventParams) {\r\n  character.current.conditions.forEach(conditionID => {\r\n    const condition = G.conditions[conditionID];\r\n    if (condition === undefined || condition === null) return;\r\n    condition.effects.forEach(effect => {\r\n      if (effect.type !== 'damageTaken') return;\r\n      const skillFunction = SkillFunctions[effect.name];\r\n      skillFunction(G, character, condition, effect, eventParams);\r\n    })\r\n  });\r\n  character.current.health -= eventParams.damage;\r\n  if (character.current.health <= 0) {\r\n    death(G, character);\r\n  }\r\n}\r\n\r\nfunction receiveHealing(G, character, amount) {\r\n  character.current.health += amount;\r\n  if (character.current.health > character.current.maxHealth) {\r\n    character.current.health = character.current.maxHealth;\r\n  }\r\n}\r\n\r\nfunction death(G, character) {\r\n  character.current.health = 0;\r\n  character.current.active = false;\r\n  character.current.alive = false;\r\n  G.conditions.forEach((condition, index) => {\r\n    if (condition === undefined || condition === null) return;\r\n    if (condition.characterID === character.current.ID) removeCondition(G, condition);\r\n  })\r\n}\r\n\r\nfunction teamID(G, character) {\r\n  if (G.teams[0].characters.indexOf(character.current.ID) !== -1) return 0\r\n  else return 1;\r\n}\r\n\r\nfunction team(G, character) {\r\n  return G.teams[teamID(G, character)];\r\n}\r\n\r\nexport default SkillFunctions\r\n\r\n\r\n","C:\\Enigma-Studios\\gacha\\src\\Conditions.js",[],"C:\\Enigma-Studios\\gacha\\src\\Lobby.js",["50"],"import React from 'react';\r\nimport { Lobby } from 'boardgame.io/react';\r\nimport { Board } from './Board';\r\nimport { Game } from './Game';\r\n\r\nconst { protocol, hostname, port } = window.location;\r\nconst server = `${protocol}//${hostname}:${port}`;\r\nconst importedGames = [{ game: Game, board: Board }];\r\n\r\nexport default () => (\r\n  <div>\r\n    <h1>Lobby</h1>\r\n    <Lobby gameServer={server} lobbyServer={server} gameComponents={importedGames} />\r\n  </div>\r\n);",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":21},{"ruleId":"59","severity":1,"message":"60","line":119,"column":11,"nodeType":"61","endLine":121,"endColumn":60},{"ruleId":"51","replacedBy":"62"},{"ruleId":"53","replacedBy":"63"},{"ruleId":"55","severity":1,"message":"64","line":1,"column":10,"nodeType":"57","messageId":"58","endLine":1,"endColumn":22},{"ruleId":"65","severity":1,"message":"66","line":147,"column":8,"nodeType":"67","messageId":"68","endLine":147,"endColumn":41},{"ruleId":"69","severity":1,"message":"70","line":10,"column":1,"nodeType":"71","endLine":15,"endColumn":3},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'skillDamage' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["72"],["73"],"'INVALID_MOVE' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]